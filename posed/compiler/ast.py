"""Classes for various AST objects generated by the parser."""


class Operator:
    def __repr__(self):
        return f"{self.__class__.__name__}()"


class Add(Operator): pass
class Sub(Operator): pass
class Mul(Operator): pass
class Div(Operator): pass


class Expr: pass


class Constant(Expr):
    def __init__(self, value):
        self.value = value

    def __repr__(self):
        return f"{self.__class__.__name__}(value={self.value!r})"


class BinaryOp(Expr):
    def __init__(self, left, op, right):
        self.left = left
        self.right = right
        self.op = op

    def __repr__(self):
        return f"{self.__class__.__name__}(op={self.op!r}, left={self.left!r}, right={self.right!r})"


def main():
    ast = BinaryOp(
        Constant(1.0),
        Add(),
        BinaryOp(
            Constant(2.0),
            Mul(),
            Constant(3.0),
        ),
    )
    print(ast)


if __name__ == '__main__':
    main()
